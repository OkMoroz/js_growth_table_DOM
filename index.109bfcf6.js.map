{"mappings":"A,S,E,C,C,C,E,C,A,M,G,E,E,M,A,G,C,E,E,M,A,E,I,I,E,E,E,A,M,G,E,E,I,C,C,E,C,C,C,E,C,O,C,C,S,E,C,E,O,A,S,C,E,G,M,O,C,G,O,E,E,E,I,A,S,C,E,G,A,a,O,Q,A,M,C,C,O,Q,C,E,A,M,C,C,a,C,O,M,I,C,E,E,I,A,S,C,C,C,E,G,G,G,A,U,O,E,O,E,E,K,G,I,E,O,S,C,Q,C,I,C,G,K,C,E,I,G,W,G,E,W,E,C,E,E,W,C,I,A,E,A,Q,G,A,Q,E,O,M,I,C,G,G,A,c,G,2C,I,C,G,O,E,E,K,G,E,I,A,W,M,A,U,wI,G,CCKA,IAAM,EAAQ,SAAS,aAAa,CAAC,UAC/B,EAAY,SAAS,aAAa,CAAC,eACnC,EAAS,SAAS,aAAa,CAAC,eAChC,EAAY,SAAS,aAAa,CAAC,kBACnC,EAAe,SAAS,aAAa,CAAC,kBAiE5C,SAAS,EAAa,CAAO,EAC3B,EAAQ,YAAY,CAAC,WAAY,OACnC,CAEA,SAAS,EAAgB,CAAO,EAC9B,EAAQ,eAAe,CAAC,WAC1B,CAEA,SAAS,IACH,EAAM,IAAI,CAAC,MAAM,CAjFL,GAiFqB,EAAU,YAAY,CAAC,YAC1D,EAAgB,GACP,EAAM,IAAI,CAAC,MAAM,CAlFZ,IAkF4B,EAAO,YAAY,CAAC,YAC9D,EAAgB,GAEhB,EAAM,IAAI,CAAC,EAAE,CAAC,KAAK,CAAC,MAAM,CAtFZ,GAuFd,EAAa,YAAY,CAAC,YAE1B,EAAgB,GAEhB,EAAM,IAAI,CAAC,EAAE,CAAC,KAAK,CAAC,MAAM,CA1FZ,IA2Fd,EAAU,YAAY,CAAC,aAEvB,EAAgB,EAGpB,CAxFA,SAAS,gBAAgB,CAAC,QAAS,SAAC,CAApC,EACE,IAAM,EAAS,EAAE,MAAM,CAAC,OAAO,CAAC,WAE3B,GAIL,AAGF,SAAqB,CAAI,EACvB,IAAM,EAAc,EAAK,OAAO,CAAC,eAC3B,EAAiB,EAAK,OAAO,CAAC,kBAC9B,EAAY,EAAK,OAAO,CAAC,eACzB,EAAe,EAAK,OAAO,CAAC,kBAElC,GAAI,EAAa,CACf,IAAM,EAAY,EAAM,IAAI,CAAC,EAAE,CAAC,SAAS,CAAC,CAAA,GAE1C,EAAM,MAAM,CAAC,GA3BC,KA6BV,EAAM,IAAI,CAAC,MAAM,EACnB,EAAa,GAGf,GACF,CAEI,IACF,EAAM,IAAI,CAAC,EAAM,IAAI,CAAC,MAAM,CAAG,EAAE,CAAC,MAAM,GAtC1B,IAwCV,EAAM,IAAI,CAAC,MAAM,EACnB,EAAa,GAGf,KAGE,IACD,EAAG,EAAM,IAAI,EAAE,OAAO,CAAC,SAAC,CAAxB,EACC,IAAM,EAAK,SAAS,aAAa,CAAC,MAElC,EAAQ,MAAM,CAAC,EACjB,GAnDc,KAqDV,EAAM,IAAI,CAAC,EAAE,CAAC,KAAK,CAAC,MAAM,EAC5B,EAAa,GAEf,KAGE,IACD,EAAG,EAAM,IAAI,EAAE,OAAO,CAAC,SAAC,CAAxB,EACC,EAAQ,KAAK,CAAC,EAAQ,KAAK,CAAC,MAAM,CAAG,EAAE,CAAC,MAAM,EAChD,GA/Dc,IAiEV,EAAM,IAAI,CAAC,EAAE,CAAC,KAAK,CAAC,MAAM,EAC5B,EAAa,GAEf,IAEJ,EAtDc,EACd","sources":["<anon>","src/scripts/main.js"],"sourcesContent":["\"use strict\";\nfunction _array_like_to_array(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];\n    return arr2;\n}\nfunction _array_without_holes(arr) {\n    if (Array.isArray(arr)) return _array_like_to_array(arr);\n}\nfunction _iterable_to_array(iter) {\n    if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\nfunction _non_iterable_spread() {\n    throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _to_consumable_array(arr) {\n    return _array_without_holes(arr) || _iterable_to_array(arr) || _unsupported_iterable_to_array(arr) || _non_iterable_spread();\n}\nfunction _unsupported_iterable_to_array(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return _array_like_to_array(o, minLen);\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(n);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _array_like_to_array(o, minLen);\n}\nvar MIN_VALUE = 2;\nvar MAX_VALUE = 10;\nvar table = document.querySelector(\".field\");\nvar rowRemove = document.querySelector(\".remove-row\");\nvar rowAdd = document.querySelector(\".append-row\");\nvar columnAdd = document.querySelector(\".append-column\");\nvar columnRemove = document.querySelector(\".remove-column\");\ndocument.addEventListener(\"click\", function(e) {\n    var target = e.target.closest(\".button\");\n    if (!target) return;\n    changeTable(target);\n});\nfunction changeTable(elem) {\n    var addTableRow = elem.closest(\".append-row\");\n    var addTableColumn = elem.closest(\".append-column\");\n    var removeRow = elem.closest(\".remove-row\");\n    var removeColumn = elem.closest(\".remove-column\");\n    if (addTableRow) {\n        var cloneElem = table.rows[0].cloneNode(true);\n        table.append(cloneElem);\n        if (table.rows.length === MAX_VALUE) addAttribute(addTableRow);\n        check();\n    }\n    if (removeRow) {\n        table.rows[table.rows.length - 1].remove();\n        if (table.rows.length === MIN_VALUE) addAttribute(removeRow);\n        check();\n    }\n    if (addTableColumn) {\n        _to_consumable_array(table.rows).forEach(function(element) {\n            var td = document.createElement(\"td\");\n            element.append(td);\n        });\n        if (table.rows[0].cells.length === MAX_VALUE) addAttribute(addTableColumn);\n        check();\n    }\n    if (removeColumn) {\n        _to_consumable_array(table.rows).forEach(function(element) {\n            element.cells[element.cells.length - 1].remove();\n        });\n        if (table.rows[0].cells.length === MIN_VALUE) addAttribute(removeColumn);\n        check();\n    }\n}\nfunction addAttribute(element) {\n    element.setAttribute(\"disabled\", \"true\");\n}\nfunction removeAttribute(element) {\n    element.removeAttribute(\"disabled\");\n}\nfunction check() {\n    if (table.rows.length > MIN_VALUE && rowRemove.hasAttribute(\"disabled\")) removeAttribute(rowRemove);\n    else if (table.rows.length < MAX_VALUE && rowAdd.hasAttribute(\"disabled\")) removeAttribute(rowAdd);\n    else if (table.rows[0].cells.length > MIN_VALUE && columnRemove.hasAttribute(\"disabled\")) removeAttribute(columnRemove);\n    else if (table.rows[0].cells.length < MAX_VALUE && columnAdd.hasAttribute(\"disabled\")) removeAttribute(columnAdd);\n}\n\n//# sourceMappingURL=index.109bfcf6.js.map\n","'use strict';\n\nconst MIN_VALUE = 2;\nconst MAX_VALUE = 10;\n\nconst table = document.querySelector('.field');\nconst rowRemove = document.querySelector('.remove-row');\nconst rowAdd = document.querySelector('.append-row');\nconst columnAdd = document.querySelector('.append-column');\nconst columnRemove = document.querySelector('.remove-column');\n\ndocument.addEventListener('click', (e) => {\n  const target = e.target.closest('.button');\n\n  if (!target) {\n    return;\n  }\n\n  changeTable(target);\n});\n\nfunction changeTable(elem) {\n  const addTableRow = elem.closest('.append-row');\n  const addTableColumn = elem.closest('.append-column');\n  const removeRow = elem.closest('.remove-row');\n  const removeColumn = elem.closest('.remove-column');\n\n  if (addTableRow) {\n    const cloneElem = table.rows[0].cloneNode(true);\n\n    table.append(cloneElem);\n\n    if (table.rows.length === MAX_VALUE) {\n      addAttribute(addTableRow);\n    }\n\n    check();\n  }\n\n  if (removeRow) {\n    table.rows[table.rows.length - 1].remove();\n\n    if (table.rows.length === MIN_VALUE) {\n      addAttribute(removeRow);\n    }\n\n    check();\n  }\n\n  if (addTableColumn) {\n    [...table.rows].forEach((element) => {\n      const td = document.createElement('td');\n\n      element.append(td);\n    });\n\n    if (table.rows[0].cells.length === MAX_VALUE) {\n      addAttribute(addTableColumn);\n    }\n    check();\n  }\n\n  if (removeColumn) {\n    [...table.rows].forEach((element) => {\n      element.cells[element.cells.length - 1].remove();\n    });\n\n    if (table.rows[0].cells.length === MIN_VALUE) {\n      addAttribute(removeColumn);\n    }\n    check();\n  }\n}\n\nfunction addAttribute(element) {\n  element.setAttribute('disabled', 'true');\n}\n\nfunction removeAttribute(element) {\n  element.removeAttribute('disabled');\n}\n\nfunction check() {\n  if (table.rows.length > MIN_VALUE && rowRemove.hasAttribute('disabled')) {\n    removeAttribute(rowRemove);\n  } else if (table.rows.length < MAX_VALUE && rowAdd.hasAttribute('disabled')) {\n    removeAttribute(rowAdd);\n  } else if (\n    table.rows[0].cells.length > MIN_VALUE &&\n    columnRemove.hasAttribute('disabled')\n  ) {\n    removeAttribute(columnRemove);\n  } else if (\n    table.rows[0].cells.length < MAX_VALUE &&\n    columnAdd.hasAttribute('disabled')\n  ) {\n    removeAttribute(columnAdd);\n  } else {\n  }\n}\n"],"names":["_array_like_to_array","arr","len","length","i","arr2","Array","_to_consumable_array","_array_without_holes","isArray","_iterable_to_array","iter","Symbol","iterator","from","_unsupported_iterable_to_array","o","minLen","n","Object","prototype","toString","call","slice","constructor","name","test","_non_iterable_spread","TypeError","table","document","querySelector","rowRemove","rowAdd","columnAdd","columnRemove","addAttribute","element","setAttribute","removeAttribute","check","rows","hasAttribute","cells","addEventListener","e","target","closest","changeTable","elem","addTableRow","addTableColumn","removeRow","removeColumn","cloneElem","cloneNode","append","remove","forEach","td","createElement"],"version":3,"file":"index.109bfcf6.js.map"}